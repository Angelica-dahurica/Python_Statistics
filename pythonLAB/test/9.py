#-*- coding:utf-8 -*-
'''
描述：

仍然利用NSFG数据（url为http://112.124.1.3:8050/getData/101.json），
但这次我们想验证第一胎婴儿是否更倾向于更早或更晚出生而较少准时出生的假设，
因此需要利用卡方检验计算出其卡方值chisq及推翻假设的p值。
试写函数solve计算卡方值chisq及p值
输入：

调查样本数据，格式为{“status”:"ok","data":
[[1, 1, 39, 1, 141, 1, 33.16, 6448.271111704751],
[1, 2, 39, 1, 126, 2, 39.25, 6448.271111704751], ...]}

每条数据包括
01 caseid（标识符）,
2  prglength（婴儿第几周出生）,
3  outcome（怀孕结果，1表示活产）,
4 totalwgt_oz（婴儿出生重量，单位盎司）,
5 birthord（第几胎,1表示第一胎）,
6 agepreg（怀孕时年龄）,
7 finalwgt（被调查者的统计权重，表明这名调查者所代表的人群在美国总人口中的比例。）

输出：

[chisq,p]

注意：

（1）婴儿第几周出生数据由于被调查人选填错误等原因出现了一些不合理数据，
比如错填了月份（5<prglength<=10），
其他错填（prglength<=5, 10<prglength<=25, prglength>=49），
对于错填月份的情况，将月份*4.33作为其周数，对于其他错填情况则舍弃此条数据

（2）一般认为，如果婴儿在第37周或更早出生，那就是提前出生；
准时出生则是在第38周到第40周；而延后出生则是在41周或更晚
'''

#import urllib2
#from scipy.stats import chi2
class Solution():
    def solve(self):
#    	response=urllib2.urlopen('http://112.124.1.3:8050/getData/101.json')
#    	html=response.read()
        html='{"data": [[1, 1, 39, 1, 141, 1, 33.16, 6448.271111704751], [1, 2, 39, 1, 126, 2, 39.25, 6448.271111704751], [2, 1, 39, 1, 146, 1, 14.33, 12999.542264385902], [2, 2, 39, 1, 112, 2, 17.83, 12999.542264385902], [2, 2, 39, 1, 99, 3, 18.33, 12999.542264385902], [6, 1, 38, 1, 137, 1, 27.0, 8874.440799222995], [6, 2, 40, 1, 153, 2, 28.83, 8874.440799222995], [6, 2, 42, 1, 134, 3, 30.16, 8874.440799222995], [7, 1, 39, 1, 121, 1, 28.08, 6911.879920534536], [7, 2, 35, 1, 106, 2, 32.33, 6911.879920534536], [12, 1, 39, 1, 125, 1, 25.75, 6909.331618252927], [14, 2, 39, 1, 112, 1, 23.0, 3039.904507096879], [14, 1, 37, 1, 64, 2, 24.58, 3039.904507096879], [15, 2, 33, 1, 123, 1, 28.33, 5553.495599217641], [15, 2, 33, 1, 120, 2, 30.33, 5553.495599217641], [18, 1, 39, 1, 101, 1, 18.91, 4153.371741429463], [21, 2, 41, 1, 140, 1, 27.91, 7237.122630412091], [21, 2, 39, 1, 131, 2, 30.58, 7237.122630412091], [23, 1, 39, 1, 89, 1, 18.91, 13533.382043124135], [24, 1, 39, 1, 108, 1, 22.25, 7424.840414467087], [24, 2, 39, 1, 118, 2, 25.75, 7424.840414467087], [24, 1, 39, 1, 109, 3, 29.41, 7424.840414467087], [28, 1, 39, 1, 130, 1, 32.66, 6949.8460820623295], [31, 1, 42, 1, 114, 1, 18.83, 5211.9431128540555], [31, 1, 37, 1, 97, 2, 20.83, 5211.9431128540555], [31, 1, 40, 1, 119, 3, 21.66, 5211.9431128540555], [36, 2, 41, 1, 128, 1, 33.08, 3594.5379731204725], [38, 1, 38, 1, 120, 1, 26.25, 10137.324111249392], [38, 1, 39, 1, 116, 2, 27.91, 10137.324111249392], [38, 1, 39, 1, 114, 3, 37.25, 10137.324111249392], [39, 2, 39, 1, 79, 1, 24.91, 1853.3472581678054], [44, 1, 39, 1, 114, 1, 31.58, 4656.0113343078165], [44, 2, 36, 1, 116, 2, 36.33, 4656.0113343078165], [46, 2, 36, 1, 96, 1, 24.25, 28882.846731507118], [46, 1, 40, 1, 143, 2, 27.75, 28882.846731507118], [49, 2, 39, 1, 127, 1, 17.41, 2737.3702215484286], [49, 1, 39, 1, 134, 2, 23.41, 2737.3702215484286], [51, 1, 39, 1, 99, 1, 21.66, 11361.980792365039], [51, 1, 39, 1, 101, 2, 27.75, 11361.980792365039], [57, 1, 39, 1, 168, 1, 17.91, 4619.754785170151], [57, 1, 37, 1, 162, 2, 20.75, 4619.754785170151], [57, 1, 39, 1, 168, 3, 21.66, 4619.754785170151], [60, 1, 40, 1, 154, 1, 27.08, 7071.357328975329], [60, 1, 40, 1, 169, 2, 31.58, 7071.357328975329], [63, 1, 41, 1, 98, 1, 26.16, 7419.813715958927], [63, 1, 37, 1, 101, 2, 28.91, 7419.813715958927], [69, 2, 37, 1, 90, 1, 19.58, 6280.839607221563], [70, 2, 39, 1, 110, 1, 31.75, 7646.969226150036], [70, 2, 38, 1, 117, 2, 37.33, 7646.969226150036], [71, 1, 39, 1, 93, 1, 19.16, 7007.241655721082], [72, 2, 39, 1, 114, 1, 17.83, 3391.286831617979], [73, 2, 40, 1, 109, 1, 25.08, 7970.095929131591], [73, 2, 36, 1, 90, 2, 33.33, 7970.095929131591], [77, 1, 39, 1, 101, 1, 23.5, 4833.129067054492], [77, 1, 39, 1, 156, 2, 26.66, 4833.129067054492], [80, 1, 39, 1, 124, 1, 23.41, 6522.561064428434], [80, 1, 39, 1, 120, 2, 26.33, 6522.561064428434], [80, 1, 39, 1, 118, 3, 28.33, 6522.561064428434], [80, 2, 39, 1, 98, 4, 29.66, 6522.561064428434], [81, 1, 39, 1, 118, 1, 21.41, 4373.861842918594], [86, 2, 39, 1, 110, 1, 19.0, 8717.001090944286], [86, 1, 39, 1, 106, 2, 21.0, 8717.001090944286], [86, 2, 35, 1, 82, 3, 23.08, 8717.001090944286], [90, 2, 39, 1, 99, 1, 21.75, 5572.689615139298], [91, 1, 39, 1, 134, 1, 23.91, 8922.710949680517], [91, 2, 39, 1, 118, 2, 32.5, 8922.710949680517], [91, 1, 39, 1, 141, 3, 33.66, 8922.710949680517], [91, 1, 39, 1, 131, 4, 34.91, 8922.710949680517], [92, 2, 39, 1, 101, 1, 17.58, 3352.3390490920206]]}'
        data=html.split('[[')[1].split(']}')[0].split(',')

        size=len(data)
        before=0
        onTime=0
        after=0
        firstNum=0
        validNum=0
        first=[0,0,0]

        print size
        for i in range(size/8):
            prglength=float(data[i*8+2])
            birthord=float(data[i*8+5])
            if(prglength<=5 or (prglength>10 and prglength<=25) or prglength>=49):
                continue
            if(prglength>5 and prglength<=10):
                prglength=prglength*4.33
            validNum+=1

            if(prglength<=37):
                before+=1
            elif(prglength>=41):
                after+=1
            else:
                onTime+=1

            
            if(birthord==1):
                firstNum+=1
                if(prglength<=37):
                    first[0]+=1
                elif(prglength>=41):
                    first[2]+=1
                else:
                    first[1]+=1

        before=before/float(validNum)
        onTime=onTime/float(validNum)
        after=after/float(validNum)

        print firstNum
        print before
        print onTime
        print after
        x2=(firstNum*before-first[0])**2/(firstNum*before)+(firstNum*onTime-first[1])**2/(firstNum*onTime)+(firstNum*after-first[2])**2/(firstNum*after)

#    	p=chi2.sf(x2,2)
#   	return [x2,p]

A=Solution()
print A.solve()
